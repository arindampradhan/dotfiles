[Special]
brace_open=\n{\n\t
brace_close=}\n
block=\n{\n\t%cursor%\n}
block_cursor={\n\t%cursor%\n}\n%cursor%
end_cursor= %cursor%;%cursor%
js_block=\s{\n\t%cursor%\n}%cursor%
py_block=\n\t%cursor%\n%cursor%
copyright=Â© {year}
author=@author {developer}
#wordchars=_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

# Optional keybindings to insert snippets
# Note: these can be overridden by Geany's configurable keybindings
[Keybindings]
#for=<Ctrl>7

[C]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%

[C++]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%
mainn=int main(int argc, char const *argv[]){\n\t%cursor% \n\treturn 0;\n}%cursor%
mainn=int=int main(){\n\t%cursor% \n\treturn 0;\n}%cursor%
struct=struct %cursor%%block_cursor%
cout= cout << "%cursor%";\n%cursor%
cin= cin >> "%cursor%";\n%cursor%
out= cout << %cursor%;\n%cursor%
in= cin >> %cursor%;\n%cursor%
inc=#include "%cursor%"\n%cursor%
incl=#include <%cursor%>\n%cursor%
print=printf("%cursor%");\n%cursor%
printf=printf("%cursor%",%cursor%);\n%cursor%
scan=scanf("%cursor%",&%cursor%);\n%cursor%
func=void %cursor%(%cursor%)%block_cursor%
fun=int %cursor%(%cursor%)%block_cursor%
import=#define CRT_SECURE_NO_WARNINGS\n#include "bits/stdc++.h"\nusing namespace std;\n


[Java]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (int i = 0; i < %cursor%; i++)%brace_open%\n%brace_close%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Javascript]
if=if (%cursor%)%js_block%
else=else%js_block%
for=for (%cursor%i = 0; i < %cursor%; i++)%js_block%
forin=for (prop in %cursor%)%js_block%
f=function %cursor%(%cursor%)%js_block%
while=while (%cursor%)%js_block%
do=do\s{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)\s{\n\tcase %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
case=case %cursor%:\n\t%cursor%\n\tbreak;
try=try%js_block%\scatch (%cursor%)%js_block%
#extra
foril=for (var i = 0, il = %cursor%; i < il; i++)%js_block%
getid=getElementById(%cursor%)
gettag=getElementsByTagName(%cursor%)
p=prototype
w=window
d=document
t=this
o={\n\t%cursor%: %cursor%\n}
log=console.log(%cursor%);
#Immediately-Invoked Function Expression (IIFE)
iife=(function (%cursor%)\s{\n\t%cursor%\n})(%cursor%);
#Class
newclass=var %cursor%MyClass = function (%cursor%)%js_block%;\n\n%cursor%MyClass.prototype = {};
#my default jshint flags
jshint=/*jshint noarg:true, eqeqeq:true, bitwise:true, undef:true, curly:true, browser:true, maxerr:50, mootools:false, jquery:true*/
#jQuery
ready=ready(function ()%js_block%);
#requireJS
define=define(function (require)%js_block%);
#doc
header=/*\n * %copyright%\n * %author%\n */

[Python]
for=for i in xrange(%cursor%):%py_block%
if=if %cursor%:\n\t%py_block%
elif=elif %cursor%:%py_block%
else=else:%py_block%
while=while %cursor%:%py_block%
try=try:\n\t%cursor%\nexcept Exception, ex:\n\t
with=with %cursor%:%py_block%
def=def %cursor% (%cursor%):\n\t""" Function doc """\n\t%py_block%
class=class %cursor%:\n\t""" Class doc """\n\t\n\tdef __init__ (self):\n\t\t""" Class initialiser """%py_block%\tpass
